generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  passwordHash String    @db.VarChar(255)
  firstName    String?   @db.VarChar(50)
  lastName     String?   @db.VarChar(50)
  isActive     Boolean   @default(true)
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now()) @db.Timestamp(0)
  updatedAt    DateTime  @default(now()) @db.Timestamp(0)
  lastLoginAt  DateTime? @db.Timestamp(0)
  isManager    Boolean   @default(false)
  isMember     Boolean   @default(false)
}

model Customer {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  email   String  @db.VarChar(255)
  mobile  String  @db.VarChar(20)
  company String? @db.VarChar(255)
  address String? @db.Text
  orders  Order[]
}

model Order {
  id                  Int      @id @default(autoincrement())
  customerId          Int
  orderType           String   @db.VarChar(100)
  currentState        String   @db.VarChar(100)
  overallStatus       String   @db.VarChar(100)
  specifications      String?  @db.Text
  deliveryDate        DateTime @db.DateTime(0)
  totalAmount         Float    @db.Float
  specialInstructions String?  @db.Text
  createdDate         DateTime @default(now()) @db.DateTime(0)

  customer       Customer        @relation(fields: [customerId], references: [id])
  comments       OrderComment[]
  files          OrderFile[]
  items          OrderItem[]
  workflowStates WorkflowState[]

  @@index([customerId])
}

model OrderComment {
  id          Int       @id @default(autoincrement())
  orderId     Int
  commentText String?   @db.Text
  commentType String?   @db.VarChar(20)
  createdBy   String?   @db.VarChar(100)
  createdAt   DateTime? @db.DateTime(0)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([orderId])
}

model OrderFile {
  id           Int       @id @default(autoincrement())
  orderId      Int
  filePath     String?   @db.VarChar(500)
  fileType     String?   @db.VarChar(50)
  uploadedBy   String?   @db.VarChar(100)
  uploadDate   DateTime? @db.DateTime(0)
  isApproved   Boolean?
  approvalDate DateTime? @db.DateTime(0)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([orderId])
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  orderId        Int
  productId      Int
  serviceType    String  @db.VarChar(100)
  quantity       Int
  unitPrice      Float   @db.Float
  totalPrice     Float   @db.Float
  size           String? @db.VarChar(50)
  color          String? @db.VarChar(100)
  specifications String? @db.Text

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([orderId])
  @@index([productId])
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  description  String?     @db.Text
  defaultPrice Float       @db.Float
  orderItems   OrderItem[]
}

model WorkflowState {
  id           Int      @id @default(autoincrement())
  orderId      Int
  stateName    String   @db.VarChar(100)
  name         String   @db.VarChar(255)
  assignedTeam String   @db.VarChar(100)
  status       String   @default("Pending") @db.VarChar(50)
  dueDate      String? @db.VarChar(255)
  colorCode    String?   @db.VarChar(20)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([orderId])
}
